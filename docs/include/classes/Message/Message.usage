Author: Jacek Materna 
October 1st, 2004

Updated Oct. 7th Jacek Materna
------------------------------

This is a preliminary external documentation for Message.class.php

What this document is not is an API documentation; that can be found inside the file 
itself. Features, uses and examples will be gone over here.

The main purpose of the Message class is to encapsulate the functionality of tracking 
and managing various message types during a session by providing a nice layer of 
abstraction between you and the interface to $_SESSION.

At the moment five types of messages are supported:
Error, Feedback, Warning, Help and Info messages. 

Variables amount of arguments can be passed between pages and can be accessed at any time, without any time restriction other than a session timeout.
/*--------------------------------------------------------------------------------*/

Usage:

You must include the file in your source file
i.e. require_once('Message.class.php');

Instanstation:
global $savant;

$msg =& new Message($savant); 
/*--------------------------------------------------------------------------------*/

Adding Messages:
$msg->add{Error|Warning|Info|Feddback|Help}($code);

$code is a STRING of a language _msgs code. Refer to
the language_text table in the database.

A nice feature implemented is that you do not have to provide all
the arguments for a particular code at one time. Subsequent adding of
the same code will just append the argument. This allows for greater
manipulative flexibility in your source, without writing redundant code.

example:
$feedback=array('FORUM_ADDED', 'ac_access_groups');
$msg->addFeedback($feedback);

// Before we print lets another another one to the same code
$feedback2=array('FORUM_ADDED', 'about_atutor_help_text');
$msg->addFeedback($feedback2);

results in ...
[feedback] => Array
                (
                    [AT_FEEDBACK_FORUM_ADDED] => Array
                        (
                            [0] => AT_FEEDBACK_FORUM_ADDED
                            [1] => ac_access_groups
                            [2] => about_atutor_help_text
                        )

                )
...


IMPORTANT: One important thing to note is that $code must be stripped
of the prefix. By prefix it is meant AT_xxx. For example:

'AT_ERROR_FORUM_NOT_FOUND' -> 'FORUM_NOT_FOUND'
/*--------------------------------------------------------------------------------*/

Printing Messages:
$msg->print{Errors|Warnings|Infos|Feedbacks|Helps|All}();

Each will dump all the stored tracked messages onto
the page at that given line with appropriate graphics.

printAll() allows all data to be dumped immediatley.
One thing to note is that once a type of Message is printed
all tracked data relating to that type is gone.
/*--------------------------------------------------------------------------------*/

Boolean checks:
contains{Errors|Warnings|Feedbacks|Helps|Infos}();

Returns true if the type of Message is being tracked and contains
some kind of data. Useful for branching conditions in knowning
when to print a Message or not. O.w returns false.
/*--------------------------------------------------------------------------------*/

Full Example:

require_once(AT_INCLUDE_PATH . '/classes/Message/Message.class.php');

global $savant;

$msg =& new Message($savant); 

$msg->addError('FORUM_NOT_FOUND');
$msg->addWarning('SAVE_YOUR_WORK');
$msg->addInfo('NO_SEARCH_RESULTS');
$msg->addFeedback('FORUM_ADDED');

/* State of $_SESSION at this point */
[message] => Array
        (
            [error] => Array
                (
                    [AT_ERROR_FORUM_NOT_FOUND] => AT_ERROR_FORUM_NOT_FOUND
                )

            [warning] => Array
                (
                    [AT_WARNING_SAVE_YOUR_WORK] => AT_WARNING_SAVE_YOUR_WORK
                )

            [info] => Array
                (
                    [AT_INFOS_NO_SEARCH_RESULTS] => AT_INFOS_NO_SEARCH_RESULTS
                )

            [feedback] => Array
                (
                    [AT_FEEDBACK_FORUM_ADDED] => AT_FEEDBACK_FORUM_ADDED
                )

        )

// Now print them
$msg->printErrors();
$msg->printWarnings();
$msg->printInfos();
$msg->printFeedbacks();

/* State of $_SESSION at this point */
 [message] => Array
        (
        )

// Let's add an array of arguments
$feedback=array('FORUM_ADDED', 'ac_access_groups');
$msg->addFeedback($feedback);

// Before we print lets another another one to the same code
$feedback2=array('FORUM_ADDED', 'about_atutor_help_text');
$msg->addFeedback($feedback2);

$msg->addHelp('DEMO_HELP2');

$help=array('DEMO_HELP2', $_my_uri);
$msg->addHelp($help);

$help2=array('ADD_TEST', $_my_uri);
$msg->addHelp($help2);


/* State of $_SESSION at this point. Notice the second addFeddback call above
 * had its arguments appended
 */
 [message] => Array
        (
            [feedback] => Array
                (
                    [AT_FEEDBACK_FORUM_ADDED] => Array
                        (
                            [0] => AT_FEEDBACK_FORUM_ADDED
                            [1] => ac_access_groups
                            [2] => about_atutor_help_text
                        )

                )

            [help] => Array
                (
                    [AT_HELP_DEMO_HELP2] => Array
                        (
                            [0] => AT_HELP_DEMO_HELP2
                            [1] => /~Jay/docs/index.php?
                        )

                    [AT_HELP_ADD_TEST] => Array
                        (
                            [0] => AT_HELP_ADD_TEST
                            [1] => /~Jay/docs/index.php?
                        )

                )

        }

$msg->printAll();

...

@see Message.class.php for more info
